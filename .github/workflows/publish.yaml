name: Publish
on:
  workflow_call:
    inputs:
      stage:
        description: Stage
        type: string
        required: true
      resourceType:
        description: Kubernetes Resource Type
        type: string
        default: daemonset
      kubectlVersion:
        description: Kubectl Version
        type: string
        default: v1.21.11
      deploy:
        description: If should deploy
        type: boolean
        default: true
    secrets:
      dockerHubUsername:
        description: Docker Hub Username
        required: false
      dockerHubPassword:
        description: Docker Hub Password
        required: false
      kubeConfig:
        description: Base64 Encoded Kube Config File
        required: false
jobs:
  
  startup:
    runs-on: ubuntu-20.04
    name: Startup
    outputs:
      stage: ${{ fromJSON(steps.startup.outputs.result).stage }}
      resource: ${{ fromJSON(steps.startup.outputs.result).resource }}
      kubectl: ${{ fromJSON(steps.startup.outputs.result).kubectl }}
      version: ${{ fromJSON(steps.version.outputs.result).version }}
      previousVersion: ${{ fromJSON(steps.version.outputs.result).previousVersion }}
    steps:
      - id: startup
        uses: actions/github-script@v6
        name: Startup
        with:
          script: |
              const stage = '${{ inputs.stage }}'.toLowerCase().trim();
              if (!['production', 'beta', 'alpha'].includes(stage))
              {
                core.setFailed(`Invalid stage name '${stage}'.`);
                return;
              }
              const resource = '${{ inputs.resourceType }}'.toLowerCase().trim();
              if (!['deployments', 'deployment', 'deploy', 'daemonsets', 'daemonset', 'ds'].includes(resource))
              {
                core.setFailed(`Invalid resource type '${resource}'.`);
                return;
              }
              const kubectl = '${{ inputs.kubectlVersion }}'.toLowerCase().trim();
              return { stage, resource, kubectl };
      
      - uses: actions/github-script@v6
        id: version
        name: Version
        with:
          script: |
              return { version: 'v2030.1-${{ needs.startup.outputs.stage }}', previousVersion: '' };
      
  deploy:
    if: inputs.deploy
    needs: [startup]
    runs-on: ubuntu-20.04
    name: Deploy
    steps:
      - id: analyzing
        name: Analyzing
        uses: actions/github-script@v6
        with:
          script: |
            const version = '${{ needs.startup.outputs.version }}';
            const resource = '${{ needs.startup.outputs.resource }}';
            const name = context.payload.repository.name;
            const label = stage !== 'production' ? `-${ stage }` : '';
            return {
              tags: `noorteam/${ name }:v${ version },noorteam/${ name }:latest${ label }`,
              resource: `${ resource }/${ name }${ label }`
            };
      - name: Docker Hub Login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.dockerHubUsername }}
          password: ${{ secrets.dockerHubPassword }}
      - name: Docker Hub Push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ fromJson(steps.analyzing.outputs.result).tags }}
          build-args: E20R_ENV=${{ needs.startup.outputs.stage }}
      - name: Kubernetes Resource Update
        run: |
          mkdir -p ~/.kube
          echo ${{ secrets.kubeConfig }} | base64 --decode > ~/.kube/config
          curl -LO https://dl.k8s.io/release/${{ needs.startup.outputs.kubectl }}/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          ./kubectl rollout restart ${{ fromJson(steps.analyzing.outputs.result).resource }} --namespace=noor

  release:
    needs: [startup]
    runs-on: ubuntu-20.04
    name: Release
    steps:
      - name: Create Release
        uses: actions/github-script@v6
        with:
          script: |
            const stage = '${{ needs.startup.outputs.stage }}';
            const version = '${{ needs.startup.outputs.version }}';
            const previousVersion = '${{ needs.startup.outputs.previousVersion }}';
            const branch = stage === 'alpha' ? 'develop' : stage === 'beta' ? 'release' : 'main';
            const prerelease = branch !== 'main';
            const releaseNotes = (await github.rest.repos.generateReleaseNotes({ owner: context.repo.owner, repo: context.repo.repo, tag_name: version, target_commitish: branch, previous_tag_name: previousVersion })).data;
            await github.rest.repos.createRelease({ owner: context.repo.owner, repo: context.repo.repo, tag_name: version, target_commitish: branch, prerelease, generate_release_notes: false, ...releaseNotes });
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
