name: SQL Server 2019 Service

on:
  workflow_dispatch:
  
jobs:
  test:
    runs-on: ubuntu-20.04
    services:
      sql-server:
        image: noorteam/mssql-docker:2019-focal # Our custom docker image running SQL Server 2019
        ports:
          - 1433:1433 # Exposing the SQL Server's port to the localhost
        env:
          DATABASE_USERNAME: oskol # Default: user
          DATABASE_NAMES: postnoor, golight, lynx # Default: database
        options: --health-cmd sqlserver_isready

    steps:
      # This is the connection string that can be used in C# for instance
      - run: echo '"Data Source=localhost,1433;Database=postnoor;User ID=oskol";'
      
      # If multiple commands intended must be run like: sh -c "sqlcmd -S localhost -U oskol -d postnoor -P '' -Q 'SELECT @@version;' && echo 'Done!'"
      - run: docker exec "${{ job.services.sql-server.id }}" sqlcmd -S "localhost" -U oskol -d postnoor -P "" -Q "SELECT @@version;"
      
      # Creating a sample script file. This can be part of the repository which will be available after calling actions/checkout@2
      - run: echo 'USE [postnoor]; CREATE TABLE [Values] (Id INT PRIMARY KEY); INSERT INTO [Values] VALUES(69); SELECT * FROM [VALUES];' > script.sql
      
      # Copying the sample script file to the SQL Server's container. This can also be a folder
      - run: docker cp ./script.sql "${{ job.services.sql-server.id }}":/tmp
      
      # Running SQL commands from the script file
      - run: docker exec "${{ job.services.sql-server.id }}" sqlcmd -S "localhost" -U oskol -d postnoor -P "" -i /tmp/script.sql
